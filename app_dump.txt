

=== FILE: \app\api\campaigns\route.ts ===

import { NextResponse } from "next/server";
import { CampaignFormData } from "@/app/components/ad-manager/AdManager";

// Helper function to convert a Base64 data URL into a Blob for uploading
async function base64ToBlob(base64: string): Promise<Blob> {
    const res = await fetch(base64);
    const blob = await res.blob();
    return blob;
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const formData: Omit<CampaignFormData, 'campaignDetail'> & { campaignDetail: Omit<CampaignFormData['campaignDetail'], 'image'> & { image: string } } = body;

    const accessToken = process.env.FB_ACCESS_TOKEN;
    const adAccountId = process.env.FB_AD_ACCOUNT_ID;
    const pageId = process.env.FB_PAGE_ID;

    if (!accessToken || !adAccountId || !pageId) {
      throw new Error("Missing Facebook API credentials in .env.local file.");
    }

    // --- STEP 1: UPLOAD THE IMAGE ---
    const base64Data = formData.campaignDetail.image.split(',')[1];
    if (!base64Data) throw new Error("Invalid image data received.");
    const imageBuffer = Buffer.from(base64Data, 'base64');
    const imageFormData = new FormData();
    const imageName = 'upload.png';
    imageFormData.append('source', new Blob([imageBuffer]), imageName);
    imageFormData.append('access_token', accessToken);
    
    const imageResponse = await fetch(`https://graph.facebook.com/v19.0/${adAccountId}/adimages`, {
        method: 'POST',
        body: imageFormData,
    });
    const imageData = await imageResponse.json();
    if (!imageResponse.ok) throw new Error(`API Error (Image Upload): ${imageData.error.message}`);
    
    let imageHash = '';
    if (imageData.images && imageData.images[imageName] && imageData.images[imageName].hash) {
      imageHash = imageData.images[imageName].hash;
    } else if (imageData.images && imageData.images[0] && imageData.images[0].hash) {
      imageHash = imageData.images[0].hash;
    }
    if (!imageHash) throw new Error("Image hash not found in API response.");
    console.log("Step 1/5: Image uploaded successfully. Hash:", imageHash);

    // --- STEP 2: CREATE THE CAMPAIGN ---
    const campaignPayload = {
      name: formData.campaignDetail.name,
      objective: formData.campaignDetail.goal,
      status: "PAUSED",
      special_ad_categories: [],
      access_token: accessToken,
    };
    const campaignResponse = await fetch(`https://graph.facebook.com/v19.0/${adAccountId}/campaigns`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(campaignPayload),
    });
    const campaignData = await campaignResponse.json();
    if (!campaignData.id) throw new Error(`API Error (Campaign Creation): ${campaignData.error.message}`);
    const campaignId = campaignData.id;
    console.log("Step 2/5: Campaign created successfully. ID:", campaignId);

    // --- STEP 3: CREATE THE AD SET ---
    const adSetPayload = {
      name: `${formData.campaignDetail.name} Ad Set`,
      campaign_id: campaignId,
      status: "PAUSED",
      billing_event: "IMPRESSIONS",
      optimization_goal: "REACH",
      daily_budget: formData.budget.minimumBudget * 100,
      bid_strategy: "LOWEST_COST_WITHOUT_CAP",
      targeting: {
        geo_locations: {
          custom_locations: formData.targetAudience.locations.map(loc => ({
            address_string: loc.address,
            radius: formData.targetAudience.locationRange,
            distance_unit: 'kilometer'
          }))
        },
        age_min: formData.targetAudience.minAge,
        age_max: formData.targetAudience.maxAge,
      },
      access_token: accessToken,
    };
    const adSetResponse = await fetch(`https://graph.facebook.com/v19.0/${adAccountId}/adsets`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(adSetPayload),
    });
    const adSetData = await adSetResponse.json();
    if (!adSetData.id) throw new Error(`API Error (Ad Set Creation): ${adSetData.error.message}`);
    const adSetId = adSetData.id;
    console.log("Step 3/5: Ad Set created successfully. ID:", adSetId);

    // --- STEP 4: CREATE THE AD CREATIVE ---
    const adCreativePayload = {
      name: `${formData.campaignDetail.name} Creative`,
      object_story_spec: {
        page_id: pageId,
        link_data: {
          image_hash: imageHash,
          link: "https://www.example.com",
          message: formData.campaignDetail.description,
          call_to_action: { 'type': 'LEARN_MORE' }
        },
      },
      access_token: accessToken,
    };
    const adCreativeResponse = await fetch(`https://graph.facebook.com/v19.0/${adAccountId}/adcreatives`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(adCreativePayload),
    });
    const adCreativeData = await adCreativeResponse.json();
    if (!adCreativeData.id) throw new Error(`API Error (Ad Creative Creation): ${adCreativeData.error.message}`);
    const adCreativeId = adCreativeData.id;
    console.log("Step 4/5: Ad Creative created successfully. ID:", adCreativeId);

    // --- STEP 5: CREATE THE AD ---
    const adPayload = {
      name: `${formData.campaignDetail.name} Ad`,
      adset_id: adSetId,
      creative: { creative_id: adCreativeId },
      status: "PAUSED",
      access_token: accessToken,
    };
    const adResponse = await fetch(`https://graph.facebook.com/v19.0/${adAccountId}/ads`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(adPayload),
    });
    const adData = await adResponse.json();
    if (!adData.id) throw new Error(`API Error (Ad Creation): ${adData.error.message}`);
    const adId = adData.id;
    console.log("Step 5/5: Final Ad created successfully. ID:", adId);

    return NextResponse.json({ message: "Campaign created successfully!", adId: adId }, { status: 200 });

  } catch (error) {
    let errorMessage = "An unknown error occurred";
    if (error instanceof Error) {
      errorMessage = error.message;
    }
    console.error("Full API Error:", errorMessage);
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}


=== FILE: \app\campaigns\page.tsx ===

"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { CampaignsTable } from "@/app/components/ad-manager/table/CampaignsTable";
import { columns } from "@/app/components/ad-manager/table/columns";
import { useCampaignStore } from "@/lib/store";

export default function CampaignsPage() {
  // Read the list of campaigns from our global store
  const campaigns = useCampaignStore((state) => state.campaigns);

  return (
    <main className="min-h-screen w-full bg-slate-100 p-4 sm:p-6 md:p-8">
      <div className="container mx-auto">
        <Card>
          <CardHeader>
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
              <div>
                <CardTitle>Campaigns</CardTitle>
                <CardDescription>
                </CardDescription>
              </div>
              <Button asChild>
                <Link href="/">Create New Ad</Link>
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <CampaignsTable columns={columns} data={campaigns} />
          </CardContent>
        </Card>
      </div>
    </main>
  );
}

=== FILE: \app\components\ad-manager\AdManager.tsx ===

"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useCampaignStore } from "@/lib/store";

import VerticalStepper from "./VerticalStepper";
import FormActions from "./ui/FormActions";
import ChannelTypeStep from "./steps/ChannelTypeStep";
import CampaignDetailStep from "./steps/CampaignDetailStep";
import TargetAudienceStep from "./steps/TargetAudienceStep";
import BudgetSchedulingStep from "./steps/BudgetSchedulingStep";
import PaymentStep from "./steps/PaymentStep";
import { Location } from "./ui/LocationSearchInput"; // Import the Location type

// The data structure for the form
export interface CampaignFormData {
  channel: { facebook: boolean; instagram: boolean };
  type: "image" | "video";
  campaignDetail: { image: File | null; name: string; description: string; goal: string; pageId: string; };
  targetAudience: { 
    gender: string; 
    minAge: string; 
    maxAge: string; 
    locations: Location[]; // Use the Location[] type
    locationRange: number; 
  };
  budget: { startDate?: Date; endDate?: Date; minimumBudget: number; totalBudget: string };
  payment: { selectedCard: string };
}

export type { Location };

// Helper function to convert a File to a Base64 string
const fileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);
  });
};

const TOTAL_STEPS = 5;

const AdManager: React.FC = () => {
  const router = useRouter();
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const addCampaign = useCampaignStore((state) => state.addCampaign);

  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState<CampaignFormData>({
    channel: { facebook: true, instagram: false },
    type: "image",
    campaignDetail: { image: null, name: "", description: "", goal: "OUTCOME_TRAFFIC", pageId: "" },
    // CORRECTED: Ensure 'locations' is initialized as an empty array
    targetAudience: { gender: "all", minAge: "18", maxAge: "65", locations: [], locationRange: 20 },
    budget: { startDate: undefined, endDate: undefined, minimumBudget: 500, totalBudget: "0" },
    payment: { selectedCard: "visa-156" },
  });

  useEffect(() => {
    const { startDate, endDate, minimumBudget } = formData.budget;
    if (startDate && endDate && endDate >= startDate) {
      const start = new Date(startDate.setHours(0, 0, 0, 0));
      const end = new Date(endDate.setHours(0, 0, 0, 0));
      const dayCount = (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24) + 1;
      const newTotal = dayCount * minimumBudget;
      if (newTotal.toString() !== formData.budget.totalBudget) {
        setFormData(prev => ({
          ...prev,
          budget: { ...prev.budget, totalBudget: newTotal.toString() }
        }));
      }
    }
  }, [formData.budget]);

  const handleNext = () => setStep((prev) => Math.min(prev + 1, TOTAL_STEPS));
  const handleBack = () => setStep((prev) => Math.max(prev - 1, 1));
  
  const handleSubmit = async () => {
    if (!formData.campaignDetail.image) {
      alert("Please upload an image for the ad.");
      return;
    }
    setIsSubmitting(true);
    
    try {
      const imageBase64 = await fileToBase64(formData.campaignDetail.image);
      const payload = {
        ...formData,
        campaignDetail: { ...formData.campaignDetail, image: imageBase64 },
      };

      const response = await fetch('/api/campaigns', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      const result = await response.json();
      if (!response.ok) throw new Error(result.error || "An unknown API error occurred");

      addCampaign(formData);
      setIsSubmitted(true);
      alert(result.message || "Campaign Submitted Successfully!");

    } catch (error) {
      let errorMessage = "An unknown error occurred";
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      alert(`Error: ${errorMessage}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderStepContent = () => {
    switch (step) {
      case 1: return <ChannelTypeStep formData={formData} setFormData={setFormData} />;
      case 2: return <CampaignDetailStep formData={formData} setFormData={setFormData} />;
      case 3: return <TargetAudienceStep formData={formData} setFormData={setFormData} />;
      case 4: return <BudgetSchedulingStep formData={formData} setFormData={setFormData} />;
      case 5: return <PaymentStep formData={formData} setFormData={setFormData} />;
      default: return <ChannelTypeStep formData={formData} setFormData={setFormData} />;
    }
  };

  return (
    <>
      <Card className="w-full max-w-5xl shadow-lg">
        <CardHeader>
          <CardTitle>Ad manager</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col md:flex-row gap-8 md:gap-12">
          <div className="w-full md:w-1/3 lg:w-1/4">
            <VerticalStepper currentStep={step} setStep={setStep} />
          </div>
          <div className="flex-1 min-h-[450px]">
            {renderStepContent()}
          </div>
        </CardContent>
        <CardFooter>
          <FormActions
            currentStep={step}
            totalSteps={TOTAL_STEPS}
            onBack={handleBack}
            onNext={handleNext}
            onSubmit={handleSubmit}
            isSubmitting={isSubmitting}
          />
        </CardFooter>
      </Card>

      {isSubmitted && (
        <div className="w-full max-w-5xl flex justify-center mt-6">
          <Button onClick={() => router.push('/campaigns')} size="lg">
            View All Campaigns
          </Button>
        </div>
      )}
    </>
  );
};

export default AdManager;


=== FILE: \app\components\ad-manager\steps\BudgetSchedulingStep.tsx ===

"use client";

import React from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { DatePicker } from "../ui/DatePicker";
import { Slider } from "@/components/ui/slider";
import { CampaignFormData } from "../AdManager";

interface BudgetSchedulingStepProps {
  formData: CampaignFormData;
  setFormData: React.Dispatch<React.SetStateAction<CampaignFormData>>;
}

const BudgetSchedulingStep: React.FC<BudgetSchedulingStepProps> = ({ formData, setFormData }) => {
  const handleBudgetChange = (field: keyof CampaignFormData["budget"], value: string | number | Date | undefined) => {
    setFormData((prev: CampaignFormData) => ({
      ...prev,
      budget: { ...prev.budget, [field]: value },
    }));
  };

  const handleSliderChange = (value: number[]) => {
    handleBudgetChange("minimumBudget", value[0]);
  };

  const creativeDesignCost = 500;
  const tax = 0;
  const totalBudget = parseFloat(formData.budget.totalBudget) || 0;
  const total = creativeDesignCost + totalBudget + tax;

  return (
    <div className="space-y-8 animate-in fade-in-50 duration-300">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <Label className="font-semibold">Start Date</Label>
          <DatePicker date={formData.budget.startDate} setDate={(date) => handleBudgetChange("startDate", date)} placeholder="Select a start date" />
        </div>
        <div className="space-y-2">
          <Label className="font-semibold">End Date</Label>
          <DatePicker date={formData.budget.endDate} setDate={(date) => handleBudgetChange("endDate", date)} placeholder="Select an end date" />
        </div>
      </div>
      
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <Label htmlFor="minimum-budget-input" className="font-semibold">Minimum Budget</Label>
          <div className="flex items-center gap-2">
            {/* --- THIS IS THE CORRECTED LINE --- */}
            <span className="text-sm font-medium text-gray-500">₹</span>
            <Input
              id="minimum-budget-input"
              type="number"
              className="w-24 h-9 text-center"
              value={formData.budget.minimumBudget}
              onChange={(e) => handleBudgetChange("minimumBudget", parseInt(e.target.value) || 0)}
            />
          </div>
        </div>
        <Slider
          value={[formData.budget.minimumBudget]}
          max={2000}
          step={10}
          onValueChange={handleSliderChange}
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="total-budget" className="font-semibold">Total Budget (Auto-Calculated)</Label>
        <Input
          id="total-budget"
          type="number"
          value={formData.budget.totalBudget}
          disabled
          className="font-bold"
        />
      </div>

      <div className="space-y-4 rounded-lg border bg-slate-50 p-6 mt-8">
        <div className="space-y-2">
          <SummaryRow label="Creative Design" amount={creativeDesignCost} />
          <SummaryRow label="Total Ad Spend" amount={totalBudget} />
          <SummaryRow label="Tax" amount={tax} />
        </div>
        <Separator />
        <div className="space-y-2">
          <SummaryRow label="Total" amount={total} isBold={true} />
        </div>
      </div>
    </div>
  );
};

const SummaryRow = ({ label, amount, isBold = false }: { label: string; amount: number; isBold?: boolean }) => (
  <div className={`flex justify-between items-center ${isBold ? "font-bold text-gray-800" : "text-gray-600"}`}>
    <p>{label}</p>
    <p>₹{amount.toFixed(2)}</p>
  </div>
);

export default BudgetSchedulingStep;


=== FILE: \app\components\ad-manager\steps\CampaignDetailStep.tsx ===

"use client";

import React from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Card } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import ImageUploader from "../ui/ImageUploader";
import { CampaignFormData } from "../AdManager";

// UPDATED: The props for pages and loading state have been removed.
interface CampaignDetailStepProps {
  formData: CampaignFormData;
  setFormData: React.Dispatch<React.SetStateAction<CampaignFormData>>;
}

// Data for the "Goals" radio cards
const goals = [
  {
    id: "goal-traffic",
    value: "OUTCOME_TRAFFIC",
    title: "Traffic",
    description: "Send more people to a destination, such as your website or app.",
  },
  {
    id: "goal-awareness",
    value: "OUTCOME_AWARENESS",
    title: "Awareness",
    description: "Show your ads to people who are most likely to remember them.",
  },
  {
    id: "goal-leads",
    value: "OUTCOME_LEADS",
    title: "Leads",
    description: "Collect leads for your business or brand.",
  },
  {
    id: "goal-sales",
    value: "OUTCOME_SALES",
    title: "Sales",
    description: "Find people likely to purchase your product or service.",
  },
  {
    id: "goal-engagement",
    value: "OUTCOME_ENGAGEMENT",
    title: "Engagement",
    description: "Get more messages, video views, post engagements, or Page likes.",
  },
  {
    id: "goal-app-promotion",
    value: "OUTCOME_APP_PROMOTION",
    title: "App Promotion",
    description: "Find new people to install your app and continue using it.",
  },
];

const CampaignDetailStep: React.FC<CampaignDetailStepProps> = ({ formData, setFormData }) => {
  const handleDetailChange = (field: keyof CampaignFormData["campaignDetail"], value: string | File | null) => {
    setFormData((prev: CampaignFormData) => ({
      ...prev,
      campaignDetail: {
        ...prev.campaignDetail,
        [field]: value,
      },
    }));
  };

  return (
    <div className="space-y-8 animate-in fade-in-50 duration-300">
      {/* The Facebook Page dropdown has been removed from this section */}

      <div className="space-y-2">
        <Label htmlFor="ad-image" className="font-semibold">Upload Image*</Label>
        <ImageUploader onFileChange={(file) => handleDetailChange("image", file)} />
      </div>

      <div className="space-y-2">
        <Label htmlFor="ad-name" className="font-semibold">Name*</Label>
        <Input
          id="ad-name"
          placeholder="e.g., Summer Sale Campaign"
          value={formData.campaignDetail.name}
          onChange={(e) => handleDetailChange("name", e.target.value)}
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="ad-description" className="font-semibold">Description*</Label>
        <Textarea
          id="ad-description"
          placeholder="Add a description for your ad..."
          value={formData.campaignDetail.description}
          onChange={(e) => handleDetailChange("description", e.target.value)}
        />
      </div>

      <div className="space-y-4">
        <h3 className="font-semibold text-gray-800">Goals</h3>
        <RadioGroup
          value={formData.campaignDetail.goal}
          onValueChange={(value) => handleDetailChange("goal", value)}
        >
          <Card>
            {goals.map((goal, index) => (
              <React.Fragment key={goal.id}>
                <Label
                  htmlFor={goal.id}
                  className="flex items-start space-x-4 p-4 cursor-pointer hover:bg-slate-50 transition-colors"
                >
                  <RadioGroupItem value={goal.value} id={goal.id} className="mt-1" />
                  <div className="space-y-1">
                    <p className="font-medium text-sm text-gray-800">{goal.title}</p>
                    <p className="text-gray-600 text-sm">{goal.description}</p>
                  </div>
                </Label>
                {index < goals.length - 1 && <Separator />}
              </React.Fragment>
            ))}
          </Card>
        </RadioGroup>
      </div>
    </div>
  );
};

export default CampaignDetailStep;


=== FILE: \app\components\ad-manager\steps\ChannelTypeStep.tsx ===

"use client";

import React from "react";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { CampaignFormData } from "../AdManager"; // Import the main form data type

interface ChannelTypeStepProps {
  formData: CampaignFormData;
  // Use the specific CampaignFormData type instead of 'any'
  setFormData: React.Dispatch<React.SetStateAction<CampaignFormData>>;
}

const ChannelTypeStep: React.FC<ChannelTypeStepProps> = ({ formData, setFormData }) => {
  const handleChannelChange = (channel: "facebook" | "instagram", checked: boolean) => {
    const { facebook, instagram } = formData.channel;

    if (!checked && ((channel === "facebook" && !instagram) || (channel === "instagram" && !facebook))) {
      return;
    }

    // Use the specific type for the 'prev' state
    setFormData((prev: CampaignFormData) => ({
      ...prev,
      channel: { ...prev.channel, [channel]: checked },
    }));
  };

  const handleTypeChange = (value: "image" | "video") => {
    if (value) {
      // Use the specific type for the 'prev' state
      setFormData((prev: CampaignFormData) => ({
        ...prev,
        type: value,
      }));
    }
  };

  return (
    <div className="space-y-8 animate-in fade-in-50 duration-300">
      <div className="space-y-4">
        <h3 className="text-base font-semibold text-gray-800">Channel</h3>
        <div className="flex flex-col space-y-3">
          <div className="flex items-center space-x-3">
            <Checkbox
              id="facebook"
              checked={formData.channel.facebook}
              onCheckedChange={(checked) => handleChannelChange("facebook", !!checked)}
            />
            <Label htmlFor="facebook" className="text-sm font-medium">
              Facebook
            </Label>
          </div>
          <div className="flex items-center space-x-3">
            <Checkbox
              id="instagram"
              checked={formData.channel.instagram}
              onCheckedChange={(checked) => handleChannelChange("instagram", !!checked)}
            />
            <Label htmlFor="instagram" className="text-sm font-medium">
              Instagram
            </Label>
          </div>
        </div>
      </div>

      <div className="space-y-4">
        <h3 className="text-base font-semibold text-gray-800">Type</h3>
        <RadioGroup
          value={formData.type}
          onValueChange={handleTypeChange}
          className="flex flex-col space-y-3"
        >
          <div className="flex items-center space-x-3">
            <RadioGroupItem value="image" id="image" />
            <Label htmlFor="image" className="text-sm font-medium">
              Image
            </Label>
          </div>
          <div className="flex items-center space-x-3">
            <RadioGroupItem value="video" id="video" />
            <Label htmlFor="video" className="text-sm font-medium">
              Video
            </Label>
          </div>
        </RadioGroup>
      </div>
    </div>
  );
};

export default ChannelTypeStep;

=== FILE: \app\components\ad-manager\steps\PaymentStep.tsx ===

"use client";

import React from "react";
import { RadioGroup } from "@/components/ui/radio-group";
import PaymentMethodCard from "../ui/PaymentMethodCard";
import { Separator } from "@/components/ui/separator";
import { CampaignFormData } from "../AdManager"; // Import the main form data type

const savedCards = [
  { id: "card-1", value: "visa-156", cardType: "visa" as const, last4: "156", expiry: "12/26" },
  { id: "card-2", value: "mc-423", cardType: "mastercard" as const, last4: "423", expiry: "08/25" },
];

interface PaymentStepProps {
  formData: CampaignFormData;
  setFormData: React.Dispatch<React.SetStateAction<CampaignFormData>>;
}

const PaymentStep: React.FC<PaymentStepProps> = ({ formData, setFormData }) => {
  const handlePaymentChange = (value: string) => {
    setFormData((prev: CampaignFormData) => ({
      ...prev,
      payment: { ...prev.payment, selectedCard: value },
    }));
  };

  const creativeDesignCost = 500;
  const tax = 0;
  const totalBudget = parseFloat(formData.budget.totalBudget) || 0;
  const totalToPay = creativeDesignCost + totalBudget + tax;

  return (
    <div className="space-y-8 animate-in fade-in-50 duration-300">
      <RadioGroup value={formData.payment.selectedCard} onValueChange={handlePaymentChange} className="space-y-3">
        {savedCards.map((card) => (
          <PaymentMethodCard
            key={card.id}
            id={card.id}
            value={card.value}
            cardType={card.cardType}
            last4={card.last4}
            expiry={card.expiry}
          />
        ))}
      </RadioGroup>
      <div className="pl-2">
        <button className="text-sm font-semibold text-violet-600 hover:text-violet-700">
          + Add New Payment
        </button>
      </div>
      <Separator />
      <div className="flex justify-between items-center">
        <p className="font-semibold">To Pay</p>
        <p className="font-bold text-xl">${totalToPay.toFixed(2)}</p>
      </div>
    </div>
  );
};

export default PaymentStep;

=== FILE: \app\components\ad-manager\steps\TargetAudienceStep.tsx ===

"use client";

import React from "react";
import dynamic from "next/dynamic";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { CampaignFormData, Location } from "../AdManager";

const LocationSearchInput = dynamic(
  () => import("../ui/LocationSearchInput").then((mod) => mod.LocationSearchInput),
  { ssr: false, loading: () => <p>Loading map...</p> }
);

interface TargetAudienceStepProps {
  formData: CampaignFormData;
  setFormData: React.Dispatch<React.SetStateAction<CampaignFormData>>;
}

const TargetAudienceStep: React.FC<TargetAudienceStepProps> = ({ formData, setFormData }) => {
  const handleAudienceChange = (field: keyof CampaignFormData["targetAudience"], value: string | number) => {
    setFormData((prev) => ({
      ...prev,
      targetAudience: { ...prev.targetAudience, [field]: value },
    }));
  };
  
  const setLocations = (locations: Location[]) => {
     setFormData((prev) => ({
      ...prev,
      targetAudience: { ...prev.targetAudience, locations: locations },
    }));
  };

  const handleSliderChange = (value: number[]) => {
    handleAudienceChange("locationRange", value[0]);
  };

  return (
    <div className="space-y-8 animate-in fade-in-50 duration-300">
      <div className="space-y-2">
        <Label className="font-semibold">Gender</Label>
        <Select
          onValueChange={(value) => handleAudienceChange("gender", value)}
          value={formData.targetAudience.gender}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select a Gender" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All</SelectItem>
            <SelectItem value="male">Male</SelectItem>
            <SelectItem value="female">Female</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="space-y-2">
        <Label className="font-semibold">Age Range</Label>
        <div className="flex items-center gap-4">
          <Input
            type="number"
            placeholder="Min age"
            value={formData.targetAudience.minAge}
            onChange={(e) => handleAudienceChange("minAge", e.target.value)}
            min="13"
            max="100"
          />
          <Input
            type="number"
            placeholder="Max age"
            value={formData.targetAudience.maxAge}
            onChange={(e) => handleAudienceChange("maxAge", e.target.value)}
            min="13"
            max="100"
          />
        </div>
      </div>
      
      <div className="space-y-2">
        <Label className="font-semibold">Location</Label>
        <LocationSearchInput locations={formData.targetAudience.locations} setLocations={setLocations} />
      </div>

      <div className="space-y-4 pt-2">
        <div className="flex justify-between items-center">
          <Label className="font-semibold">Location Range</Label>
          <span className="text-sm font-medium text-gray-700">
            KM | {formData.targetAudience.locationRange}
          </span>
        </div>
        <Slider
          value={[formData.targetAudience.locationRange]}
          max={100}
          step={1}
          onValueChange={handleSliderChange}
        />
      </div>
    </div>
  );
};

export default TargetAudienceStep;


=== FILE: \app\components\ad-manager\table\CampaignsTable.tsx ===

"use client";

import * as React from "react";
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Campaign } from "./columns";

interface CampaignsTableProps {
  columns: ColumnDef<Campaign>[];
  data: Campaign[];
}

export function CampaignsTable({ columns, data }: CampaignsTableProps) {
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
    },
  });

  return (
    <div className="w-full">
      <div className="flex items-center py-4">
        <Input
          placeholder="Filter by ad name..."
          value={(table.getColumn("adName")?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn("adName")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
      </div>
      <div className="rounded-md border bg-white">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No campaigns found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.previousPage()}
          disabled={!table.getCanPreviousPage()}
        >
          Previous
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.nextPage()}
          disabled={!table.getCanNextPage()}
        >
          Next
        </Button>
      </div>
    </div>
  );
}

=== FILE: \app\components\ad-manager\table\columns.tsx ===

"use client";

import { ColumnDef } from "@tanstack/react-table";
import { ArrowUpDown, MoreHorizontal } from "lucide-react";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Checkbox } from "@/components/ui/checkbox";

export type Campaign = {
  id: string;
  adName: string;
  goals: string;
  type: "image" | "video";
  platform: "Facebook" | "Instagram" | "Both";
  startDate: string;
  endDate: string;
  budget: number;
  status: "Completed" | "In Progress" | "Paused";
};

export const columns: ColumnDef<Campaign>[] = [
  {
    accessorKey: "adName",
    header: "Ad Name",
    cell: ({ row }) => (
      <div className="capitalize font-medium">{row.getValue("adName")}</div>
    ),
  },
  {
    accessorKey: "goals",
    header: "Goals",
  },
  {
    accessorKey: "type",
    header: "Type",
    cell: ({ row }) => {
      const type = row.original.type;
      return <div className="capitalize">{type}</div>;
    },
  },
  {
    accessorKey: "platform",
    header: "Platform",
  },
  {
    accessorKey: "endDate",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          End Date
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      );
    },
  },
  {
    accessorKey: "budget",
    header: () => <div className="text-right">Budget</div>,
    cell: ({ row }) => {
      const amount = parseFloat(row.getValue("budget"));
      const formatted = new Intl.NumberFormat("en-IN", {
        style: "currency",
        currency: "INR",
      }).format(amount);
      return <div className="text-right font-medium">{formatted}</div>;
    },
  },
  {
    accessorKey: "status",
    header: "Status",
    cell: ({ row }) => {
      const status = row.original.status;
      const variant = {
        "Completed": "default",
        "In Progress": "secondary",
        "Paused": "outline",
      }[status] as "default" | "secondary" | "outline";
      
      return <Badge variant={variant} className="capitalize">{status}</Badge>;
    },
  },
  {
    id: "actions",
    cell: ({ row }) => (
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" className="h-8 w-8 p-0">
            <span className="sr-only">Open menu</span>
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuLabel>Actions</DropdownMenuLabel>
          <DropdownMenuItem>Edit</DropdownMenuItem>
          <DropdownMenuItem>View details</DropdownMenuItem>
          <DropdownMenuItem className="text-red-600">Delete</DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    ),
  },
];

=== FILE: \app\components\ad-manager\ui\CustomRadioCard.tsx ===

import React from "react";
import { RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";

interface CustomRadioCardProps {
  id: string;
  value: string;
  title: string;
  description: string;
}

const CustomRadioCard: React.FC<CustomRadioCardProps> = ({ id, value, title, description }) => {
  return (
    // The Label wraps the entire card, making the whole area clickable
    <Label htmlFor={id} className="block cursor-pointer">
      <Card
        className="p-4 flex items-start space-x-4 transition-colors 
                   hover:bg-gray-50 has-[[data-state=checked]]:bg-violet-50 
                   has-[[data-state=checked]]:border-violet-400"
      >
        <RadioGroupItem value={value} id={id} aria-label={title} />
        <div className="space-y-1 -mt-1">
          <p className="font-medium text-sm text-gray-800">{title}</p>
          <p className="text-gray-600 text-sm">{description}</p>
        </div>
      </Card>
    </Label>
  );
};

export default CustomRadioCard;

=== FILE: \app\components\ad-manager\ui\DatePicker.tsx ===

"use client";

import * as React from "react";
import { format } from "date-fns";
import { Calendar as CalendarIcon } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

// Define props for type safety
interface DatePickerProps {
  date: Date | undefined;
  setDate: (date: Date | undefined) => void;
  placeholder: string;
}

export function DatePicker({ date, setDate, placeholder }: DatePickerProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant={"outline"}
          className={cn(
            "w-full justify-start text-left font-normal",
            !date && "text-muted-foreground" // Style differently if no date is selected
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {date ? format(date, "PPP") : <span>{placeholder}</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <Calendar
          mode="single"
          selected={date}
          onSelect={setDate}
          initialFocus
        />
      </PopoverContent>
    </Popover>
  );
}

=== FILE: \app\components\ad-manager\ui\FormActions.tsx ===

import React from "react";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react"; // Import a loading spinner icon

// The interface for the component's props
interface FormActionsProps {
  currentStep: number;
  totalSteps: number;
  onBack: () => void;
  onNext: () => void;
  onSubmit: () => void;
  isSubmitting: boolean; // ADDED: The new prop for the loading state
}

const FormActions: React.FC<FormActionsProps> = ({
  currentStep,
  totalSteps,
  onBack,
  onNext,
  onSubmit,
  isSubmitting, // Use the new prop
}) => {
  const isLastStep = currentStep === totalSteps;
  const nextButtonText = isLastStep ? "Pay & Submit Campaign" : "Next";

  return (
    <div className="w-full flex justify-end items-center gap-4">
      <Button variant="ghost" className="text-gray-600" disabled={isSubmitting}>
        Cancel
      </Button>
      
      {currentStep > 1 && (
        <Button variant="ghost" onClick={onBack} disabled={isSubmitting}>
          Back
        </Button>
      )}

      <Button onClick={isLastStep ? onSubmit : onNext} disabled={isSubmitting}>
        {/* This part shows the spinner when submitting on the last step */}
        {isSubmitting && isLastStep ? (
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
        ) : null}
        {isSubmitting && isLastStep ? "Submitting..." : nextButtonText}
      </Button>
    </div>
  );
};

export default FormActions;

=== FILE: \app\components\ad-manager\ui\ImageUploader.tsx ===

"use client";

import React, { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import { UploadCloud, X } from "lucide-react";

// Props definition for type safety
interface ImageUploaderProps {
  onFileChange: (file: File | null) => void;
}

const ImageUploader: React.FC<ImageUploaderProps> = ({ onFileChange }) => {
  const [preview, setPreview] = useState<string | null>(null);

  // Memoize the onDrop function to prevent re-renders
  const onDrop = useCallback(
    (acceptedFiles: File[]) => {
      const file = acceptedFiles[0];
      if (file) {
        onFileChange(file);
        setPreview(URL.createObjectURL(file));
      }
    },
    [onFileChange]
  );

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: { "image/*": [".jpeg", ".png", ".jpg", ".gif"] },
    multiple: false,
  });

  // Function to remove the selected image
  const removeImage = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent triggering the dropzone click
    setPreview(null);
    onFileChange(null);
    // Revoke the object URL to free up memory
    if (preview) {
      URL.revokeObjectURL(preview);
    }
  };

  // If a preview exists, show the image and a remove button
  if (preview) {
    return (
      <div className="relative w-full h-48 rounded-lg overflow-hidden group">
        <img src={preview} alt="Ad creative preview" className="w-full h-full object-cover" />
        <button
          onClick={removeImage}
          className="absolute top-2 right-2 bg-black/50 text-white rounded-full p-1.5 opacity-0 group-hover:opacity-100 transition-opacity"
          aria-label="Remove image"
        >
          <X size={18} />
        </button>
      </div>
    );
  }

  // Otherwise, show the dropzone input
  return (
    <div
      {...getRootProps()}
      className={`w-full h-48 border-2 border-dashed rounded-lg flex flex-col items-center justify-center cursor-pointer transition-colors ${
        isDragActive
          ? "border-violet-600 bg-violet-50"
          : "border-gray-300 bg-gray-50 hover:border-gray-400"
      }`}
    >
      <input {...getInputProps()} />
      <UploadCloud className="text-gray-400 mb-2" size={32} />
      <p className="text-gray-500 text-sm">
        Drag and drop image or <span className="font-semibold text-violet-600">browse</span>
      </p>
    </div>
  );
};

export default ImageUploader;

=== FILE: \app\components\ad-manager\ui\LocationSearchInput.tsx ===

"use client";

import React, { useState } from "react";
import { MapContainer, TileLayer, Marker, useMap, useMapEvents } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { X, MapPin } from "lucide-react";

// Fix for default Leaflet icon issue
// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

export interface Location {
  id: string;
  address: string;
  lat: number;
  lng: number;
}

interface NominatimResult {
  place_id: number;
  display_name: string;
  lat: string;
  lon: string;
}

interface LocationSearchInputProps {
  locations: Location[];
  setLocations: (locations: Location[]) => void;
}

const MapClickHandler = ({ onMapClick }: { onMapClick: (latlng: L.LatLng) => void }) => {
  useMapEvents({
    click(e) { onMapClick(e.latlng); },
  });
  return null;
};

export const LocationSearchInput: React.FC<LocationSearchInputProps> = ({ locations = [], setLocations }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [results, setResults] = useState<NominatimResult[]>([]);
  const [isDroppingPin, setIsDroppingPin] = useState(false);

  const handleSearch = async () => {
    if (searchTerm.length > 2) {
      try {
        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${searchTerm}&countrycodes=in`);
        const data = await response.json();
        setResults(data);
      } catch (error) {
        console.error("Error fetching location data:", error);
      }
    }
  };

  const addLocation = (address: string, lat: number, lng: number) => {
    const newLocation: Location = { id: new Date().toISOString(), address, lat, lng };
    setLocations([...locations, newLocation]);
  };

  const handleSelect = (result: NominatimResult) => {
    addLocation(result.display_name, parseFloat(result.lat), parseFloat(result.lon));
    setSearchTerm("");
    setResults([]);
  };

  const handleMapClick = async (latlng: L.LatLng) => {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latlng.lat}&lon=${latlng.lng}`);
      const data = await response.json();
      if (data.display_name) {
        addLocation(data.display_name, latlng.lat, latlng.lng);
      }
    } catch (error) {
      console.error("Error reverse geocoding:", error);
    }
    setIsDroppingPin(false);
  };
  
  const removeLocation = (id: string) => {
    setLocations(locations.filter((loc) => loc.id !== id));
  };

  return (
    <div className="space-y-3">
      <div className="max-h-24 overflow-y-auto space-y-2 rounded-md border p-2">
        {locations.length > 0 ? (
          locations.map((loc) => (
            <div key={loc.id} className="flex items-center justify-between p-2 bg-slate-100 rounded-md text-sm">
              {/* --- THIS IS THE FIX --- */}
              {/* Adding 'min-w-0' allows the text to truncate correctly inside the flex container */}
              <span
  className="truncate min-w-0 w-0 flex-1 pr-2 overflow-hidden whitespace-nowrap"
  title={loc.address} // Shows full value on hover!
>
  {loc.address}
</span>
              <Button variant="ghost" size="icon" className="h-6 w-6 flex-shrink-0" onClick={() => removeLocation(loc.id)}>
                <X className="h-4 w-4" />
              </Button>
            </div>
          ))
        ) : (
          <p className="text-sm text-gray-500 text-center py-2">No locations selected.</p>
        )}
      </div>

      <div className="relative">
        <div className="flex items-center gap-2">
          <Input
            type="text"
            placeholder="Search for a location..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Button onClick={handleSearch}>Go</Button>
        </div>
        {results.length > 0 && (
          <ul className="absolute z-[1001] w-full bg-white border rounded-md shadow-lg max-h-60 overflow-y-auto mt-1">
            {results.map((result) => (
              <li key={result.place_id} className="px-4 py-2 cursor-pointer hover:bg-slate-100" onClick={() => handleSelect(result)}>
                {result.display_name}
              </li>
            ))}
          </ul>
        )}
      </div>

      <div className="h-[250px] w-full rounded-lg overflow-hidden relative">
        <MapContainer center={[11.0168, 76.9558]} zoom={13} style={{ height: "100%", width: "100%" }} zoomControl={false}>
          <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
          {locations.map(loc => <Marker key={loc.id} position={[loc.lat, loc.lng]} />)}
          {isDroppingPin && <MapClickHandler onMapClick={handleMapClick} />}
        </MapContainer>
        <Button 
          onClick={() => setIsDroppingPin(true)} 
          className="absolute bottom-2 right-2 z-[1000] bg-white text-black hover:bg-slate-100 shadow-md"
        >
          <MapPin className="mr-2 h-4 w-4" />
          Drop Pin
        </Button>
      </div>
    </div>
  );
};



=== FILE: \app\components\ad-manager\ui\PaymentMethodCard.tsx ===

import React from "react";
import { RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

// A simple component to render a card brand logo.
// In a real application, you would use SVG icons for this.
const CardLogo = ({ type }: { type: "visa" | "mastercard" }) => {
  if (type === "visa") {
    return (
      <div className="w-10 h-6 flex items-center justify-center rounded bg-blue-600 text-white font-bold text-xs">
        VISA
      </div>
    );
  }
  if (type === "mastercard") {
    return (
      <div className="w-10 h-6 flex items-center justify-center rounded bg-gray-700">
        <div className="w-4 h-4 rounded-full bg-red-500 relative -right-1"></div>
        <div className="w-4 h-4 rounded-full bg-yellow-500 relative -left-1 opacity-80"></div>
      </div>
    );
  }
  return null;
};

// Define the component's props
interface PaymentMethodCardProps {
  id: string;
  value: string;
  cardType: "visa" | "mastercard";
  last4: string;
  expiry: string;
}

const PaymentMethodCard: React.FC<PaymentMethodCardProps> = ({
  id,
  value,
  cardType,
  last4,
  expiry,
}) => {
  return (
    <Label htmlFor={id} className="block cursor-pointer">
      <Card
        className="p-4 flex items-center transition-colors 
                   hover:bg-gray-50 has-[[data-state=checked]]:bg-violet-50 
                   has-[[data-state=checked]]:border-violet-400"
      >
        <RadioGroupItem value={value} id={id} className="mr-4" />
        <div className="flex-1 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <CardLogo type={cardType} />
            <div>
              <p className="font-medium text-sm text-gray-800">
                {cardType === "visa" ? "Visa" : "Mastercard"} ending in {last4}
              </p>
              <p className="text-gray-500 text-sm">Expiry {expiry}</p>
            </div>
          </div>
          <Button variant="ghost" size="sm" className="text-violet-600 hover:text-violet-700">
            Update
          </Button>
        </div>
      </Card>
    </Label>
  );
};

export default PaymentMethodCard;

=== FILE: \app\components\ad-manager\VerticalStepper.tsx ===

import React from "react";

// UPDATED: The props now include a 'setStep' function
interface VerticalStepperProps {
  currentStep: number;
  setStep: (step: number) => void;
}

// An array to hold the data for our navigation steps.
const steps = [
  { id: 1, title: "Channel & Type" },
  { id: 2, title: "Campaign Detail" },
  { id: 3, title: "Target Audience" },
  { id: 4, title: "Budget & Scheduling" },
  { id: 5, title: "Payment" },
];

const VerticalStepper: React.FC<VerticalStepperProps> = ({ currentStep, setStep }) => {
  return (
    <nav aria-label="Ad Creation Steps">
      <ul className="space-y-2">
        {steps.map((step) => (
          <li key={step.id}>
            {/* UPDATED: This is now a clickable button */}
            <button
              onClick={() => setStep(step.id)}
              className={`w-full text-left px-4 py-3 rounded-lg text-sm font-medium transition-colors duration-200 ${
                currentStep === step.id
                  ? "bg-violet-100 text-violet-700" // Active step style
                  : "bg-transparent text-gray-600 hover:bg-slate-200" // Inactive step style with hover
              }`}
            >
              {step.title}
            </button>
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default VerticalStepper;


=== FILE: \app\page.tsx ===

"use client";

import React, { useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { CampaignsTable } from "@/app/components/ad-manager/table/CampaignsTable";
import { columns } from "@/app/components/ad-manager/table/columns";
import { useCampaignStore } from "@/lib/store";
import AdManager from "@/app/components/ad-manager/AdManager";

export default function HomePage() {
  const [activeTab, setActiveTab] = useState("create");
  const campaigns = useCampaignStore((state) => state.campaigns);

  return (
    <main className="min-h-screen w-full bg-slate-100 p-4 sm:p-6 md:p-8">
      <div className="container mx-auto">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2 max-w-md mx-auto">
            <TabsTrigger value="create">Create New Ad</TabsTrigger>
            <TabsTrigger value="campaigns">View Campaigns</TabsTrigger>
          </TabsList>

          <TabsContent value="create">
            <div className="mt-6 flex justify-center">
              <AdManager onSuccess={() => setActiveTab("campaigns")} />
            </div>
          </TabsContent>

          <TabsContent value="campaigns">
            <Card className="mt-6">
              <CardHeader>
                <CardTitle>Campaigns</CardTitle>
              </CardHeader>
              <CardContent>
                <CampaignsTable columns={columns} data={campaigns} />
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </main>
  );
}
